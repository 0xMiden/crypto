use alloc::vec::Vec;
use core::{
    f64::consts::PI,
    ops::{Add, AddAssign, Mul, MulAssign, Neg, Sub, SubAssign},
};

#[cfg(not(feature = "std"))]
use num::Float;
use num::{One, Zero};
use num_complex::Complex64;

use super::{Inverse, field::FalconFelt, polynomial::Polynomial};

/// Implements Cyclotomic FFT without bitreversing the outputs, and using precomputed powers of the
/// 2n-th primitive root of unity.
pub trait FastFft: Sized + Clone {
    type Field: Add + Mul + AddAssign + MulAssign + Neg + Sub + SubAssign;
    fn fft_inplace(&mut self);
    fn fft(&self) -> Self {
        let mut a = self.clone();
        a.fft_inplace();
        a
    }

    fn merge_fft(a: &Self, b: &Self) -> Self;
    fn split_fft(&self) -> (Self, Self);

    fn ifft_inplace(&mut self);
    fn ifft(&self) -> Self {
        let mut a = self.clone();
        a.ifft_inplace();
        a
    }
}

pub trait CyclotomicFourier
where
    Self: Sized
        + Copy
        + One
        + Zero
        + Add<Output = Self>
        + Sub<Output = Self>
        + Mul<Output = Self>
        + MulAssign
        + Inverse,
{
    /// Gets the inverse of 2^n.
    #[allow(dead_code)]
    fn power_of_two_inverse(n: usize) -> Self {
        let mut a = Self::one() + Self::one();
        for _ in 0..n {
            a *= a;
        }
        Self::inverse_or_zero(a)
    }

    /// Gets a primitive nth (with n a power of 2) root of unity.
    #[allow(dead_code)]
    fn primitive_root_of_unity(n: usize) -> Self;

    /// Computes the integer whose n-bit binary expansion is the reverse of that of the argument.
    fn bitreverse_index(arg: usize, n: usize) -> usize {
        assert!(n > 0);
        assert_eq!(n & (n - 1), 0);
        let mut rev = 0;
        let mut m = n >> 1;
        let mut k = 1;
        while m > 0 {
            rev |= (((arg & m) != 0) as usize) * k;
            k <<= 1;
            m >>= 1;
        }
        rev
    }

    /// Computes the first n powers of the 2nd root of unity, and put them in bit-reversed order.
    #[allow(dead_code)]
    fn bitreversed_powers(n: usize) -> Vec<Self> {
        let psi = Self::primitive_root_of_unity(2 * n);
        let mut array = vec![Self::zero(); n];
        let mut alpha = Self::one();
        for a in array.iter_mut() {
            *a = alpha;
            alpha *= psi;
        }
        Self::bitreverse_array(&mut array);
        array
    }

    /// Computes the first n powers of the 2nd root of unity, invert them, and put them in
    /// bit-reversed order.
    #[allow(dead_code)]
    fn bitreversed_powers_inverse(n: usize) -> Vec<Self> {
        let psi = Self::primitive_root_of_unity(2 * n).inverse_or_zero();
        let mut array = vec![Self::zero(); n];
        let mut alpha = Self::one();
        for a in array.iter_mut() {
            *a = alpha;
            alpha *= psi;
        }
        Self::bitreverse_array(&mut array);
        array
    }

    /// Reorders the given elements in the array by reversing the binary expansions of their
    /// indices.
    fn bitreverse_array<T>(array: &mut [T]) {
        let n = array.len();
        for i in 0..n {
            let j = Self::bitreverse_index(i, n);
            if i < j {
                array.swap(i, j);
            }
        }
    }

    /// Computes the evaluations of the polynomial on the roots of the polynomial X^n + 1 using a
    /// fast Fourier transform. Algorithm 1 from https://eprint.iacr.org/2016/504.pdf.
    ///
    /// Arguments:
    ///
    ///  - a : &mut [Self] (a reference to) a mutable array of field elements which is to be
    ///    transformed under the FFT. The transformation happens in- place.
    ///
    ///  - psi_rev: &[Self] (a reference to) an array of powers of psi, from 0 to n-1, but ordered
    ///    by bit-reversed index. Here psi is a primitive root of order 2n. You can use
    ///    `Self::bitreversed_powers(psi, n)` for this purpose, but this trait implementation is not
    ///    const. For the performance benefit you want a precompiled array, which you can get if you
    ///    can get by implementing the same method and marking it "const".
    fn fft(a: &mut [Self], psi_rev: &[Self]) {
        let n = a.len();
        let mut t = n;
        let mut m = 1;
        while m < n {
            t >>= 1;
            for i in 0..m {
                let j1 = 2 * i * t;
                let j2 = j1 + t - 1;
                let s = psi_rev[m + i];
                for j in j1..=j2 {
                    let u = a[j];
                    let v = a[j + t] * s;
                    a[j] = u + v;
                    a[j + t] = u - v;
                }
            }
            m <<= 1;
        }
    }

    /// Computes the coefficients of the polynomial with the given evaluations on the roots of
    /// X^n + 1 using an inverse fast Fourier transform.
    /// Algorithm 2 from https://eprint.iacr.org/2016/504.pdf.
    ///
    /// Arguments:
    ///
    ///  - a : &mut [Self] (a reference to) a mutable array of field elements which is to be
    ///    transformed under the IFFT. The transformation happens in- place.
    ///
    ///  - psi_inv_rev: &[Self] (a reference to) an array of powers of psi^-1, from 0 to n-1, but
    ///    ordered by bit-reversed index. Here psi is a primitive root of order 2n. You can use
    ///    `Self::bitreversed_powers(Self::inverse_or_zero(psi), n)` for this purpose, but this
    ///    trait implementation is not const. For the performance benefit you want a precompiled
    ///    array, which you can get if you can get by implementing the same methods and marking them
    ///    "const".
    fn ifft(a: &mut [Self], psi_inv_rev: &[Self], ninv: Self) {
        let n = a.len();
        let mut t = 1;
        let mut m = n;
        while m > 1 {
            let h = m / 2;
            let mut j1 = 0;
            for i in 0..h {
                let j2 = j1 + t - 1;
                let s = psi_inv_rev[h + i];
                for j in j1..=j2 {
                    let u = a[j];
                    let v = a[j + t];
                    a[j] = u + v;
                    a[j + t] = (u - v) * s;
                }
                j1 += 2 * t;
            }
            t <<= 1;
            m >>= 1;
        }
        for ai in a.iter_mut() {
            *ai *= ninv;
        }
    }

    fn split_fft(f: &[Self], psi_inv_rev: &[Self]) -> (Vec<Self>, Vec<Self>) {
        let n_over_2 = f.len() / 2;
        let mut f0 = vec![Self::zero(); n_over_2];
        let mut f1 = vec![Self::zero(); n_over_2];
        let two_inv = (Self::one() + Self::one()).inverse_or_zero();
        for i in 0..n_over_2 {
            let two_i = i * 2;
            let two_zeta_inv = two_inv * psi_inv_rev[n_over_2 + i];
            f0[i] = two_inv * (f[two_i] + f[two_i + 1]);
            f1[i] = two_zeta_inv * (f[two_i] - f[two_i + 1]);
        }
        (f0, f1)
    }

    fn merge_fft(f0: &[Self], f1: &[Self], psi_rev: &[Self]) -> Vec<Self> {
        let n_over_2 = f0.len();
        let n = 2 * n_over_2;
        let mut f = vec![Self::zero(); n];
        for i in 0..n_over_2 {
            let two_i = i * 2;
            f[two_i] = f0[i] + psi_rev[n_over_2 + i] * f1[i];
            f[two_i + 1] = f0[i] - psi_rev[n_over_2 + i] * f1[i];
        }
        f
    }
}

impl CyclotomicFourier for Complex64 {
    fn primitive_root_of_unity(n: usize) -> Self {
        let angle = 2. * PI / (n as f64);
        Complex64::new(f64::cos(angle), f64::sin(angle))
    }

    /// Custom implementation of CyclotomicFourier::bitreversed_powers for
    /// better precision.
    fn bitreversed_powers(n: usize) -> Vec<Self> {
        let mut array = vec![Self::zero(); n];
        let half_circle = PI;
        for (i, a) in array.iter_mut().enumerate() {
            let angle = (i as f64) * half_circle / (n as f64);
            *a = Self::new(f64::cos(angle), f64::sin(angle));
        }
        Self::bitreverse_array(&mut array);
        array
    }

    /// Custom implementation of CyclotomicFourier::bitreversed_powers_inverse
    /// for better precision.
    fn bitreversed_powers_inverse(n: usize) -> Vec<Self> {
        let mut array = vec![Self::zero(); n];
        let half_circle = PI;
        for (i, a) in array.iter_mut().enumerate() {
            let angle = (i as f64) * half_circle / (n as f64);
            *a = Self::new(f64::cos(angle), -f64::sin(angle));
        }
        Self::bitreverse_array(&mut array);
        array
    }
}

impl FastFft for Polynomial<Complex64> {
    type Field = Complex64;
    fn fft_inplace(&mut self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        Complex64::fft(&mut self.coefficients, &COMPLEX_BITREVERSED_POWERS);
    }

    fn ifft_inplace(&mut self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        let psi_inv_rev: Vec<Complex64> =
            COMPLEX_BITREVERSED_POWERS.iter().map(|c| Complex64::new(c.re, -c.im)).collect();
        let ninv = Complex64::new(1.0 / (n as f64), 0.0);
        Complex64::ifft(&mut self.coefficients, &psi_inv_rev, ninv);
    }

    fn merge_fft(a: &Self, b: &Self) -> Self {
        let n = a.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        Self {
            coefficients: Self::Field::merge_fft(
                &a.coefficients,
                &b.coefficients,
                &COMPLEX_BITREVERSED_POWERS,
            ),
        }
    }

    fn split_fft(&self) -> (Self, Self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        let psi_inv_rev: Vec<Complex64> =
            COMPLEX_BITREVERSED_POWERS.iter().map(|c| Complex64::new(c.re, -c.im)).collect();
        let (a, b) = Self::Field::split_fft(&self.coefficients, &psi_inv_rev);
        (Self { coefficients: a }, Self { coefficients: b })
    }
}

impl FastFft for Polynomial<FalconFelt> {
    type Field = FalconFelt;

    fn fft_inplace(&mut self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        FalconFelt::fft(&mut self.coefficients, &FELT_BITREVERSED_POWERS);
    }

    fn ifft_inplace(&mut self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        let ninv = match n {
            1 => FELT_NINV_1,
            2 => FELT_NINV_2,
            4 => FELT_NINV_4,
            8 => FELT_NINV_8,
            16 => FELT_NINV_16,
            32 => FELT_NINV_32,
            64 => FELT_NINV_64,
            128 => FELT_NINV_128,
            256 => FELT_NINV_256,
            512 => FELT_NINV_512,
            _ => unreachable!("vector length is not power of 2 or larger than 512"),
        };
        FalconFelt::ifft(&mut self.coefficients, &FELT_BITREVERSED_POWERS_INVERSE, ninv);
    }

    fn merge_fft(a: &Self, b: &Self) -> Self {
        let n = a.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        Self {
            coefficients: Self::Field::merge_fft(
                &a.coefficients,
                &b.coefficients,
                &FELT_BITREVERSED_POWERS,
            ),
        }
    }

    fn split_fft(&self) -> (Self, Self) {
        let n = self.coefficients.len();
        debug_assert!(
            (1..=512).contains(&n),
            "unsupported: n = {n} not a power of 2 or larger than 512"
        );
        let (a, b) = Self::Field::split_fft(&self.coefficients, &FELT_BITREVERSED_POWERS_INVERSE);
        (Self { coefficients: a }, Self { coefficients: b })
    }
}

#[allow(clippy::approx_constant)]
const COMPLEX_BITREVERSED_POWERS: [Complex64; 512] = [
    Complex64::new(1.0, 0.0),
    Complex64::new(0.00000000000000006123233995736766, 1.0),
    Complex64::new(0.7071067811865476, 0.7071067811865475),
    Complex64::new(-0.7071067811865475, 0.7071067811865476),
    Complex64::new(0.9238795325112867, 0.3826834323650898),
    Complex64::new(-0.3826834323650897, 0.9238795325112867),
    Complex64::new(0.38268343236508984, 0.9238795325112867),
    Complex64::new(-0.9238795325112867, 0.3826834323650899),
    Complex64::new(0.9807852804032304, 0.19509032201612825),
    Complex64::new(-0.1950903220161282, 0.9807852804032304),
    Complex64::new(0.5555702330196023, 0.8314696123025452),
    Complex64::new(-0.8314696123025453, 0.5555702330196022),
    Complex64::new(0.8314696123025452, 0.5555702330196022),
    Complex64::new(-0.555570233019602, 0.8314696123025455),
    Complex64::new(0.19509032201612833, 0.9807852804032304),
    Complex64::new(-0.9807852804032304, 0.1950903220161286),
    Complex64::new(0.9951847266721969, 0.0980171403295606),
    Complex64::new(-0.09801714032956065, 0.9951847266721969),
    Complex64::new(0.6343932841636455, 0.773010453362737),
    Complex64::new(-0.773010453362737, 0.6343932841636455),
    Complex64::new(0.881921264348355, 0.47139673682599764),
    Complex64::new(-0.4713967368259977, 0.881921264348355),
    Complex64::new(0.29028467725446233, 0.9569403357322089),
    Complex64::new(-0.9569403357322088, 0.2902846772544624),
    Complex64::new(0.9569403357322088, 0.29028467725446233),
    Complex64::new(-0.29028467725446216, 0.9569403357322089),
    Complex64::new(0.4713967368259978, 0.8819212643483549),
    Complex64::new(-0.8819212643483549, 0.47139673682599786),
    Complex64::new(0.773010453362737, 0.6343932841636455),
    Complex64::new(-0.6343932841636454, 0.7730104533627371),
    Complex64::new(0.09801714032956077, 0.9951847266721968),
    Complex64::new(-0.9951847266721968, 0.09801714032956083),
    Complex64::new(0.9987954562051724, 0.049067674327418015),
    Complex64::new(-0.04906767432741801, 0.9987954562051724),
    Complex64::new(0.6715589548470183, 0.7409511253549591),
    Complex64::new(-0.7409511253549589, 0.6715589548470186),
    Complex64::new(0.9039892931234433, 0.4275550934302821),
    Complex64::new(-0.42755509343028186, 0.9039892931234434),
    Complex64::new(0.33688985339222005, 0.9415440651830208),
    Complex64::new(-0.9415440651830207, 0.33688985339222033),
    Complex64::new(0.970031253194544, 0.24298017990326387),
    Complex64::new(-0.24298017990326387, 0.970031253194544),
    Complex64::new(0.5141027441932217, 0.8577286100002721),
    Complex64::new(-0.857728610000272, 0.5141027441932218),
    Complex64::new(0.8032075314806449, 0.5956993044924334),
    Complex64::new(-0.5956993044924334, 0.8032075314806449),
    Complex64::new(0.14673047445536175, 0.989176509964781),
    Complex64::new(-0.989176509964781, 0.1467304744553618),
    Complex64::new(0.989176509964781, 0.14673047445536175),
    Complex64::new(-0.14673047445536164, 0.989176509964781),
    Complex64::new(0.5956993044924335, 0.8032075314806448),
    Complex64::new(-0.8032075314806448, 0.5956993044924335),
    Complex64::new(0.8577286100002721, 0.5141027441932217),
    Complex64::new(-0.5141027441932217, 0.8577286100002721),
    Complex64::new(0.24298017990326398, 0.970031253194544),
    Complex64::new(-0.970031253194544, 0.24298017990326407),
    Complex64::new(0.9415440651830208, 0.33688985339222005),
    Complex64::new(-0.33688985339221994, 0.9415440651830208),
    Complex64::new(0.4275550934302822, 0.9039892931234433),
    Complex64::new(-0.9039892931234433, 0.42755509343028203),
    Complex64::new(0.7409511253549591, 0.6715589548470183),
    Complex64::new(-0.6715589548470184, 0.740951125354959),
    Complex64::new(0.049067674327418126, 0.9987954562051724),
    Complex64::new(-0.9987954562051724, 0.049067674327417966),
    Complex64::new(0.9996988186962042, 0.024541228522912288),
    Complex64::new(-0.024541228522912142, 0.9996988186962042),
    Complex64::new(0.6895405447370669, 0.7242470829514669),
    Complex64::new(-0.7242470829514668, 0.689540544737067),
    Complex64::new(0.9142097557035307, 0.40524131400498986),
    Complex64::new(-0.40524131400498975, 0.9142097557035307),
    Complex64::new(0.3598950365349883, 0.9329927988347388),
    Complex64::new(-0.9329927988347388, 0.35989503653498833),
    Complex64::new(0.9757021300385286, 0.2191012401568698),
    Complex64::new(-0.21910124015686966, 0.9757021300385286),
    Complex64::new(0.5349976198870973, 0.844853565249707),
    Complex64::new(-0.8448535652497071, 0.5349976198870972),
    Complex64::new(0.8175848131515837, 0.5758081914178453),
    Complex64::new(-0.5758081914178453, 0.8175848131515837),
    Complex64::new(0.17096188876030136, 0.9852776423889412),
    Complex64::new(-0.9852776423889412, 0.17096188876030122),
    Complex64::new(0.99247953459871, 0.1224106751992162),
    Complex64::new(-0.12241067519921615, 0.99247953459871),
    Complex64::new(0.6152315905806268, 0.7883464276266062),
    Complex64::new(-0.7883464276266062, 0.6152315905806269),
    Complex64::new(0.8700869911087115, 0.49289819222978404),
    Complex64::new(-0.492898192229784, 0.8700869911087115),
    Complex64::new(0.2667127574748984, 0.9637760657954398),
    Complex64::new(-0.9637760657954398, 0.2667127574748985),
    Complex64::new(0.9495281805930367, 0.3136817403988915),
    Complex64::new(-0.3136817403988914, 0.9495281805930367),
    Complex64::new(0.4496113296546066, 0.8932243011955153),
    Complex64::new(-0.8932243011955152, 0.4496113296546069),
    Complex64::new(0.7572088465064846, 0.6531728429537768),
    Complex64::new(-0.6531728429537765, 0.7572088465064847),
    Complex64::new(0.07356456359966745, 0.9972904566786902),
    Complex64::new(-0.9972904566786902, 0.07356456359966773),
    Complex64::new(0.9972904566786902, 0.07356456359966743),
    Complex64::new(-0.07356456359966733, 0.9972904566786902),
    Complex64::new(0.6531728429537768, 0.7572088465064845),
    Complex64::new(-0.7572088465064846, 0.6531728429537766),
    Complex64::new(0.8932243011955153, 0.44961132965460654),
    Complex64::new(-0.4496113296546067, 0.8932243011955152),
    Complex64::new(0.3136817403988916, 0.9495281805930367),
    Complex64::new(-0.9495281805930367, 0.3136817403988914),
    Complex64::new(0.9637760657954398, 0.26671275747489837),
    Complex64::new(-0.2667127574748983, 0.9637760657954398),
    Complex64::new(0.4928981922297841, 0.8700869911087113),
    Complex64::new(-0.8700869911087113, 0.49289819222978415),
    Complex64::new(0.7883464276266063, 0.6152315905806268),
    Complex64::new(-0.6152315905806267, 0.7883464276266063),
    Complex64::new(0.12241067519921628, 0.99247953459871),
    Complex64::new(-0.99247953459871, 0.12241067519921635),
    Complex64::new(0.9852776423889412, 0.17096188876030122),
    Complex64::new(-0.17096188876030124, 0.9852776423889412),
    Complex64::new(0.5758081914178453, 0.8175848131515837),
    Complex64::new(-0.8175848131515836, 0.5758081914178454),
    Complex64::new(0.8448535652497071, 0.5349976198870972),
    Complex64::new(-0.534997619887097, 0.8448535652497072),
    Complex64::new(0.21910124015686977, 0.9757021300385286),
    Complex64::new(-0.9757021300385285, 0.21910124015687005),
    Complex64::new(0.932992798834739, 0.3598950365349881),
    Complex64::new(-0.35989503653498817, 0.9329927988347388),
    Complex64::new(0.40524131400498986, 0.9142097557035307),
    Complex64::new(-0.9142097557035307, 0.4052413140049899),
    Complex64::new(0.724247082951467, 0.6895405447370668),
    Complex64::new(-0.6895405447370669, 0.7242470829514669),
    Complex64::new(0.024541228522912264, 0.9996988186962042),
    Complex64::new(-0.9996988186962042, 0.024541228522912326),
    Complex64::new(0.9999247018391445, 0.012271538285719925),
    Complex64::new(-0.012271538285719823, 0.9999247018391445),
    Complex64::new(0.6983762494089729, 0.7157308252838186),
    Complex64::new(-0.7157308252838186, 0.6983762494089729),
    Complex64::new(0.9191138516900578, 0.3939920400610481),
    Complex64::new(-0.393992040061048, 0.9191138516900578),
    Complex64::new(0.3713171939518376, 0.9285060804732155),
    Complex64::new(-0.9285060804732155, 0.3713171939518377),
    Complex64::new(0.9783173707196277, 0.20711137619221856),
    Complex64::new(-0.20711137619221845, 0.9783173707196277),
    Complex64::new(0.5453249884220465, 0.838224705554838),
    Complex64::new(-0.8382247055548381, 0.5453249884220464),
    Complex64::new(0.8245893027850253, 0.5657318107836131),
    Complex64::new(-0.5657318107836132, 0.8245893027850252),
    Complex64::new(0.18303988795514106, 0.9831054874312163),
    Complex64::new(-0.9831054874312163, 0.1830398879551409),
    Complex64::new(0.9939069700023561, 0.11022220729388306),
    Complex64::new(-0.11022220729388306, 0.9939069700023561),
    Complex64::new(0.6248594881423865, 0.7807372285720944),
    Complex64::new(-0.7807372285720945, 0.6248594881423863),
    Complex64::new(0.8760700941954066, 0.4821837720791227),
    Complex64::new(-0.4821837720791227, 0.8760700941954066),
    Complex64::new(0.27851968938505306, 0.9604305194155658),
    Complex64::new(-0.9604305194155658, 0.27851968938505317),
    Complex64::new(0.9533060403541939, 0.3020059493192281),
    Complex64::new(-0.3020059493192281, 0.9533060403541939),
    Complex64::new(0.46053871095824, 0.8876396204028539),
    Complex64::new(-0.8876396204028538, 0.4605387109582402),
    Complex64::new(0.765167265622459, 0.6438315428897914),
    Complex64::new(-0.6438315428897913, 0.7651672656224591),
    Complex64::new(0.08579731234443988, 0.996312612182778),
    Complex64::new(-0.996312612182778, 0.08579731234444016),
    Complex64::new(0.9981181129001492, 0.06132073630220858),
    Complex64::new(-0.06132073630220853, 0.9981181129001492),
    Complex64::new(0.6624157775901718, 0.7491363945234593),
    Complex64::new(-0.7491363945234591, 0.662415777590172),
    Complex64::new(0.8986744656939538, 0.43861623853852766),
    Complex64::new(-0.4386162385385274, 0.8986744656939539),
    Complex64::new(0.325310292162263, 0.9456073253805213),
    Complex64::new(-0.9456073253805212, 0.32531029216226326),
    Complex64::new(0.9669764710448521, 0.25486565960451457),
    Complex64::new(-0.2548656596045145, 0.9669764710448521),
    Complex64::new(0.5035383837257176, 0.8639728561215867),
    Complex64::new(-0.8639728561215867, 0.5035383837257177),
    Complex64::new(0.7958369046088836, 0.6055110414043255),
    Complex64::new(-0.6055110414043254, 0.7958369046088836),
    Complex64::new(0.13458070850712622, 0.99090263542778),
    Complex64::new(-0.99090263542778, 0.13458070850712628),
    Complex64::new(0.9873014181578584, 0.15885814333386145),
    Complex64::new(-0.15885814333386128, 0.9873014181578584),
    Complex64::new(0.5857978574564389, 0.8104571982525948),
    Complex64::new(-0.8104571982525947, 0.585797857456439),
    Complex64::new(0.8513551931052652, 0.524589682678469),
    Complex64::new(-0.5245896826784687, 0.8513551931052652),
    Complex64::new(0.23105810828067128, 0.9729399522055601),
    Complex64::new(-0.9729399522055601, 0.23105810828067133),
    Complex64::new(0.937339011912575, 0.34841868024943456),
    Complex64::new(-0.3484186802494344, 0.937339011912575),
    Complex64::new(0.4164295600976373, 0.9091679830905223),
    Complex64::new(-0.9091679830905224, 0.41642956009763715),
    Complex64::new(0.7326542716724128, 0.680600997795453),
    Complex64::new(-0.680600997795453, 0.7326542716724128),
    Complex64::new(0.03680722294135899, 0.9993223845883495),
    Complex64::new(-0.9993223845883495, 0.03680722294135883),
    Complex64::new(0.9993223845883495, 0.03680722294135883),
    Complex64::new(-0.036807222941358866, 0.9993223845883495),
    Complex64::new(0.6806009977954531, 0.7326542716724128),
    Complex64::new(-0.7326542716724127, 0.6806009977954532),
    Complex64::new(0.9091679830905224, 0.41642956009763715),
    Complex64::new(-0.416429560097637, 0.9091679830905225),
    Complex64::new(0.3484186802494345, 0.937339011912575),
    Complex64::new(-0.9373390119125748, 0.3484186802494348),
    Complex64::new(0.9729399522055602, 0.2310581082806711),
    Complex64::new(-0.23105810828067114, 0.9729399522055602),
    Complex64::new(0.5245896826784688, 0.8513551931052652),
    Complex64::new(-0.8513551931052652, 0.524589682678469),
    Complex64::new(0.8104571982525948, 0.5857978574564389),
    Complex64::new(-0.5857978574564389, 0.8104571982525948),
    Complex64::new(0.1588581433338614, 0.9873014181578584),
    Complex64::new(-0.9873014181578584, 0.15885814333386147),
    Complex64::new(0.99090263542778, 0.13458070850712617),
    Complex64::new(-0.1345807085071261, 0.99090263542778),
    Complex64::new(0.6055110414043255, 0.7958369046088835),
    Complex64::new(-0.7958369046088835, 0.6055110414043257),
    Complex64::new(0.8639728561215868, 0.5035383837257176),
    Complex64::new(-0.5035383837257175, 0.8639728561215868),
    Complex64::new(0.2548656596045146, 0.9669764710448521),
    Complex64::new(-0.9669764710448521, 0.2548656596045147),
    Complex64::new(0.9456073253805213, 0.3253102921622629),
    Complex64::new(-0.32531029216226287, 0.9456073253805214),
    Complex64::new(0.4386162385385277, 0.8986744656939538),
    Complex64::new(-0.8986744656939539, 0.43861623853852755),
    Complex64::new(0.7491363945234594, 0.6624157775901718),
    Complex64::new(-0.6624157775901719, 0.7491363945234593),
    Complex64::new(0.06132073630220865, 0.9981181129001492),
    Complex64::new(-0.9981181129001492, 0.06132073630220849),
    Complex64::new(0.996312612182778, 0.0857973123444399),
    Complex64::new(-0.08579731234443976, 0.996312612182778),
    Complex64::new(0.6438315428897915, 0.765167265622459),
    Complex64::new(-0.765167265622459, 0.6438315428897914),
    Complex64::new(0.8876396204028539, 0.46053871095824),
    Complex64::new(-0.46053871095824006, 0.8876396204028539),
    Complex64::new(0.3020059493192282, 0.9533060403541938),
    Complex64::new(-0.9533060403541939, 0.30200594931922803),
    Complex64::new(0.9604305194155658, 0.27851968938505306),
    Complex64::new(-0.27851968938505295, 0.9604305194155659),
    Complex64::new(0.48218377207912283, 0.8760700941954066),
    Complex64::new(-0.8760700941954065, 0.4821837720791229),
    Complex64::new(0.7807372285720945, 0.6248594881423863),
    Complex64::new(-0.6248594881423862, 0.7807372285720946),
    Complex64::new(0.11022220729388318, 0.9939069700023561),
    Complex64::new(-0.9939069700023561, 0.11022220729388324),
    Complex64::new(0.9831054874312163, 0.18303988795514095),
    Complex64::new(-0.18303988795514092, 0.9831054874312163),
    Complex64::new(0.5657318107836132, 0.8245893027850253),
    Complex64::new(-0.8245893027850251, 0.5657318107836135),
    Complex64::new(0.8382247055548381, 0.5453249884220465),
    Complex64::new(-0.5453249884220462, 0.8382247055548382),
    Complex64::new(0.20711137619221856, 0.9783173707196277),
    Complex64::new(-0.9783173707196275, 0.20711137619221884),
    Complex64::new(0.9285060804732156, 0.37131719395183754),
    Complex64::new(-0.3713171939518375, 0.9285060804732156),
    Complex64::new(0.3939920400610481, 0.9191138516900578),
    Complex64::new(-0.9191138516900578, 0.39399204006104815),
    Complex64::new(0.7157308252838186, 0.6983762494089729),
    Complex64::new(-0.6983762494089728, 0.7157308252838187),
    Complex64::new(0.012271538285719944, 0.9999247018391445),
    Complex64::new(-0.9999247018391445, 0.012271538285720007),
    Complex64::new(0.9999811752826011, 0.006135884649154475),
    Complex64::new(-0.006135884649154393, 0.9999811752826011),
    Complex64::new(0.7027547444572253, 0.7114321957452164),
    Complex64::new(-0.7114321957452165, 0.7027547444572252),
    Complex64::new(0.921514039342042, 0.38834504669882625),
    Complex64::new(-0.3883450466988262, 0.921514039342042),
    Complex64::new(0.3770074102164183, 0.9262102421383113),
    Complex64::new(-0.9262102421383114, 0.37700741021641815),
    Complex64::new(0.9795697656854405, 0.2011046348420919),
    Complex64::new(-0.20110463484209182, 0.9795697656854405),
    Complex64::new(0.5504579729366048, 0.83486287498638),
    Complex64::new(-0.83486287498638, 0.5504579729366049),
    Complex64::new(0.8280450452577558, 0.560661576197336),
    Complex64::new(-0.5606615761973359, 0.8280450452577558),
    Complex64::new(0.18906866414980628, 0.9819638691095552),
    Complex64::new(-0.9819638691095552, 0.18906866414980636),
    Complex64::new(0.9945645707342554, 0.10412163387205459),
    Complex64::new(-0.1041216338720546, 0.9945645707342554),
    Complex64::new(0.6296382389149271, 0.7768884656732324),
    Complex64::new(-0.7768884656732323, 0.6296382389149272),
    Complex64::new(0.8790122264286335, 0.4767992300633221),
    Complex64::new(-0.4767992300633219, 0.8790122264286335),
    Complex64::new(0.2844075372112718, 0.9587034748958716),
    Complex64::new(-0.9587034748958715, 0.2844075372112721),
    Complex64::new(0.9551411683057708, 0.2961508882436238),
    Complex64::new(-0.29615088824362384, 0.9551411683057707),
    Complex64::new(0.4659764957679661, 0.8847970984309378),
    Complex64::new(-0.8847970984309378, 0.4659764957679662),
    Complex64::new(0.7691033376455797, 0.6391244448637757),
    Complex64::new(-0.6391244448637757, 0.7691033376455796),
    Complex64::new(0.0919089564971327, 0.9957674144676598),
    Complex64::new(-0.9957674144676598, 0.09190895649713275),
    Complex64::new(0.9984755805732948, 0.055195244349689934),
    Complex64::new(-0.05519524434968991, 0.9984755805732948),
    Complex64::new(0.6669999223036375, 0.745057785441466),
    Complex64::new(-0.745057785441466, 0.6669999223036376),
    Complex64::new(0.901348847046022, 0.43309381885315196),
    Complex64::new(-0.4330938188531519, 0.901348847046022),
    Complex64::new(0.33110630575987643, 0.9435934581619604),
    Complex64::new(-0.9435934581619604, 0.3311063057598765),
    Complex64::new(0.9685220942744174, 0.24892760574572015),
    Complex64::new(-0.24892760574572012, 0.9685220942744174),
    Complex64::new(0.508830142543107, 0.8608669386377673),
    Complex64::new(-0.8608669386377671, 0.5088301425431073),
    Complex64::new(0.799537269107905, 0.600616479383869),
    Complex64::new(-0.6006164793838688, 0.7995372691079052),
    Complex64::new(0.14065823933284924, 0.9900582102622971),
    Complex64::new(-0.990058210262297, 0.14065823933284954),
    Complex64::new(0.9882575677307495, 0.15279718525844344),
    Complex64::new(-0.1527971852584433, 0.9882575677307495),
    Complex64::new(0.5907597018588743, 0.8068475535437992),
    Complex64::new(-0.8068475535437993, 0.5907597018588742),
    Complex64::new(0.8545579883654005, 0.5193559901655896),
    Complex64::new(-0.5193559901655896, 0.8545579883654005),
    Complex64::new(0.23702360599436734, 0.9715038909862518),
    Complex64::new(-0.9715038909862518, 0.23702360599436717),
    Complex64::new(0.9394592236021899, 0.3426607173119944),
    Complex64::new(-0.34266071731199427, 0.9394592236021899),
    Complex64::new(0.4220002707997998, 0.9065957045149153),
    Complex64::new(-0.9065957045149153, 0.42200027079979985),
    Complex64::new(0.7368165688773699, 0.6760927035753159),
    Complex64::new(-0.6760927035753158, 0.73681656887737),
    Complex64::new(0.04293825693494096, 0.9990777277526454),
    Complex64::new(-0.9990777277526454, 0.04293825693494102),
    Complex64::new(0.9995294175010931, 0.030674803176636626),
    Complex64::new(-0.03067480317663646, 0.9995294175010931),
    Complex64::new(0.6850836677727004, 0.7284643904482252),
    Complex64::new(-0.7284643904482252, 0.6850836677727004),
    Complex64::new(0.9117060320054299, 0.4108431710579039),
    Complex64::new(-0.4108431710579038, 0.9117060320054299),
    Complex64::new(0.3541635254204905, 0.9351835099389475),
    Complex64::new(-0.9351835099389476, 0.3541635254204904),
    Complex64::new(0.9743393827855759, 0.22508391135979283),
    Complex64::new(-0.22508391135979267, 0.9743393827855759),
    Complex64::new(0.5298036246862948, 0.8481203448032971),
    Complex64::new(-0.8481203448032971, 0.5298036246862948),
    Complex64::new(0.8140363297059484, 0.5808139580957645),
    Complex64::new(-0.5808139580957644, 0.8140363297059485),
    Complex64::new(0.1649131204899701, 0.9863080972445987),
    Complex64::new(-0.9863080972445986, 0.16491312048997014),
    Complex64::new(0.9917097536690995, 0.12849811079379317),
    Complex64::new(-0.1284981107937931, 0.9917097536690995),
    Complex64::new(0.6103828062763095, 0.7921065773002124),
    Complex64::new(-0.7921065773002122, 0.6103828062763097),
    Complex64::new(0.8670462455156926, 0.49822766697278187),
    Complex64::new(-0.4982276669727816, 0.8670462455156928),
    Complex64::new(0.26079411791527557, 0.9653944416976894),
    Complex64::new(-0.9653944416976893, 0.26079411791527585),
    Complex64::new(0.9475855910177411, 0.3195020308160157),
    Complex64::new(-0.31950203081601564, 0.9475855910177412),
    Complex64::new(0.44412214457042926, 0.8959662497561851),
    Complex64::new(-0.8959662497561851, 0.4441221445704293),
    Complex64::new(0.7531867990436125, 0.6578066932970786),
    Complex64::new(-0.6578066932970786, 0.7531867990436125),
    Complex64::new(0.0674439195636641, 0.9977230666441916),
    Complex64::new(-0.9977230666441916, 0.06744391956366418),
    Complex64::new(0.9968202992911657, 0.07968243797143013),
    Complex64::new(-0.07968243797143001, 0.9968202992911658),
    Complex64::new(0.6485144010221126, 0.7612023854842618),
    Complex64::new(-0.7612023854842617, 0.6485144010221126),
    Complex64::new(0.8904487232447579, 0.45508358712634384),
    Complex64::new(-0.4550835871263437, 0.890448723244758),
    Complex64::new(0.307849640041535, 0.9514350209690083),
    Complex64::new(-0.9514350209690083, 0.30784964004153503),
    Complex64::new(0.9621214042690416, 0.272621355449949),
    Complex64::new(-0.27262135544994887, 0.9621214042690416),
    Complex64::new(0.48755016014843605, 0.8730949784182901),
    Complex64::new(-0.8730949784182901, 0.4875501601484359),
    Complex64::new(0.7845565971555752, 0.6200572117632891),
    Complex64::new(-0.6200572117632892, 0.7845565971555751),
    Complex64::new(0.11631863091190488, 0.9932119492347945),
    Complex64::new(-0.9932119492347945, 0.11631863091190471),
    Complex64::new(0.984210092386929, 0.17700422041214875),
    Complex64::new(-0.17700422041214875, 0.984210092386929),
    Complex64::new(0.5707807458869674, 0.8211025149911046),
    Complex64::new(-0.8211025149911046, 0.5707807458869673),
    Complex64::new(0.8415549774368984, 0.5401714727298929),
    Complex64::new(-0.5401714727298929, 0.8415549774368984),
    Complex64::new(0.21311031991609136, 0.9770281426577544),
    Complex64::new(-0.9770281426577544, 0.21311031991609142),
    Complex64::new(0.9307669610789837, 0.36561299780477385),
    Complex64::new(-0.36561299780477385, 0.9307669610789837),
    Complex64::new(0.3996241998456468, 0.9166790599210427),
    Complex64::new(-0.9166790599210426, 0.39962419984564707),
    Complex64::new(0.7200025079613817, 0.693971460889654),
    Complex64::new(-0.6939714608896538, 0.7200025079613818),
    Complex64::new(0.01840672990580482, 0.9998305817958234),
    Complex64::new(-0.9998305817958234, 0.0184067299058051),
    Complex64::new(0.9998305817958234, 0.01840672990580482),
    Complex64::new(-0.018406729905804695, 0.9998305817958234),
    Complex64::new(0.693971460889654, 0.7200025079613817),
    Complex64::new(-0.7200025079613817, 0.693971460889654),
    Complex64::new(0.9166790599210427, 0.3996241998456468),
    Complex64::new(-0.3996241998456467, 0.9166790599210427),
    Complex64::new(0.36561299780477396, 0.9307669610789837),
    Complex64::new(-0.9307669610789837, 0.3656129978047738),
    Complex64::new(0.9770281426577544, 0.21311031991609136),
    Complex64::new(-0.21311031991609125, 0.9770281426577544),
    Complex64::new(0.540171472729893, 0.8415549774368983),
    Complex64::new(-0.8415549774368983, 0.540171472729893),
    Complex64::new(0.8211025149911046, 0.5707807458869673),
    Complex64::new(-0.5707807458869671, 0.8211025149911048),
    Complex64::new(0.17700422041214886, 0.984210092386929),
    Complex64::new(-0.984210092386929, 0.17700422041214894),
    Complex64::new(0.9932119492347945, 0.11631863091190475),
    Complex64::new(-0.11631863091190475, 0.9932119492347945),
    Complex64::new(0.6200572117632892, 0.7845565971555752),
    Complex64::new(-0.784556597155575, 0.6200572117632894),
    Complex64::new(0.8730949784182901, 0.487550160148436),
    Complex64::new(-0.4875501601484357, 0.8730949784182902),
    Complex64::new(0.272621355449949, 0.9621214042690416),
    Complex64::new(-0.9621214042690415, 0.27262135544994925),
    Complex64::new(0.9514350209690083, 0.30784964004153487),
    Complex64::new(-0.30784964004153487, 0.9514350209690083),
    Complex64::new(0.45508358712634384, 0.8904487232447579),
    Complex64::new(-0.8904487232447579, 0.4550835871263439),
    Complex64::new(0.7612023854842618, 0.6485144010221124),
    Complex64::new(-0.6485144010221124, 0.7612023854842619),
    Complex64::new(0.07968243797143013, 0.9968202992911657),
    Complex64::new(-0.9968202992911657, 0.0796824379714302),
    Complex64::new(0.9977230666441916, 0.06744391956366405),
    Complex64::new(-0.06744391956366398, 0.9977230666441916),
    Complex64::new(0.6578066932970786, 0.7531867990436124),
    Complex64::new(-0.7531867990436124, 0.6578066932970787),
    Complex64::new(0.8959662497561852, 0.4441221445704292),
    Complex64::new(-0.44412214457042914, 0.8959662497561852),
    Complex64::new(0.31950203081601575, 0.9475855910177411),
    Complex64::new(-0.9475855910177411, 0.3195020308160158),
    Complex64::new(0.9653944416976894, 0.2607941179152755),
    Complex64::new(-0.26079411791527546, 0.9653944416976894),
    Complex64::new(0.49822766697278187, 0.8670462455156926),
    Complex64::new(-0.8670462455156928, 0.49822766697278176),
    Complex64::new(0.7921065773002124, 0.6103828062763095),
    Complex64::new(-0.6103828062763096, 0.7921065773002123),
    Complex64::new(0.12849811079379322, 0.9917097536690995),
    Complex64::new(-0.9917097536690995, 0.12849811079379309),
    Complex64::new(0.9863080972445987, 0.16491312048996992),
    Complex64::new(-0.16491312048996995, 0.9863080972445987),
    Complex64::new(0.5808139580957645, 0.8140363297059483),
    Complex64::new(-0.8140363297059484, 0.5808139580957645),
    Complex64::new(0.8481203448032972, 0.5298036246862946),
    Complex64::new(-0.5298036246862947, 0.8481203448032972),
    Complex64::new(0.22508391135979278, 0.9743393827855759),
    Complex64::new(-0.9743393827855759, 0.22508391135979283),
    Complex64::new(0.9351835099389476, 0.35416352542049034),
    Complex64::new(-0.3541635254204904, 0.9351835099389476),
    Complex64::new(0.4108431710579039, 0.9117060320054299),
    Complex64::new(-0.9117060320054298, 0.41084317105790413),
    Complex64::new(0.7284643904482252, 0.6850836677727004),
    Complex64::new(-0.6850836677727002, 0.7284643904482253),
    Complex64::new(0.03067480317663658, 0.9995294175010931),
    Complex64::new(-0.9995294175010931, 0.030674803176636865),
    Complex64::new(0.9990777277526454, 0.04293825693494082),
    Complex64::new(-0.042938256934940834, 0.9990777277526454),
    Complex64::new(0.676092703575316, 0.7368165688773698),
    Complex64::new(-0.7368165688773699, 0.6760927035753159),
    Complex64::new(0.9065957045149153, 0.4220002707997997),
    Complex64::new(-0.4220002707997997, 0.9065957045149153),
    Complex64::new(0.3426607173119944, 0.9394592236021899),
    Complex64::new(-0.9394592236021899, 0.34266071731199443),
    Complex64::new(0.9715038909862518, 0.2370236059943672),
    Complex64::new(-0.23702360599436723, 0.9715038909862518),
    Complex64::new(0.5193559901655895, 0.8545579883654005),
    Complex64::new(-0.8545579883654004, 0.5193559901655898),
    Complex64::new(0.8068475535437993, 0.5907597018588742),
    Complex64::new(-0.590759701858874, 0.8068475535437994),
    Complex64::new(0.1527971852584434, 0.9882575677307495),
    Complex64::new(-0.9882575677307495, 0.15279718525844369),
    Complex64::new(0.9900582102622971, 0.1406582393328492),
    Complex64::new(-0.14065823933284913, 0.9900582102622971),
    Complex64::new(0.600616479383869, 0.799537269107905),
    Complex64::new(-0.7995372691079051, 0.6006164793838689),
    Complex64::new(0.8608669386377673, 0.508830142543107),
    Complex64::new(-0.5088301425431071, 0.8608669386377672),
    Complex64::new(0.24892760574572026, 0.9685220942744173),
    Complex64::new(-0.9685220942744174, 0.2489276057457201),
    Complex64::new(0.9435934581619604, 0.33110630575987643),
    Complex64::new(-0.3311063057598763, 0.9435934581619604),
    Complex64::new(0.433093818853152, 0.901348847046022),
    Complex64::new(-0.9013488470460219, 0.43309381885315207),
    Complex64::new(0.7450577854414661, 0.6669999223036375),
    Complex64::new(-0.6669999223036374, 0.7450577854414661),
    Complex64::new(0.05519524434969003, 0.9984755805732948),
    Complex64::new(-0.9984755805732948, 0.055195244349690094),
    Complex64::new(0.9957674144676598, 0.09190895649713272),
    Complex64::new(-0.09190895649713257, 0.9957674144676598),
    Complex64::new(0.6391244448637757, 0.7691033376455796),
    Complex64::new(-0.7691033376455795, 0.6391244448637758),
    Complex64::new(0.8847970984309378, 0.4659764957679662),
    Complex64::new(-0.465976495767966, 0.8847970984309379),
    Complex64::new(0.29615088824362396, 0.9551411683057707),
    Complex64::new(-0.9551411683057707, 0.296150888243624),
    Complex64::new(0.9587034748958716, 0.2844075372112719),
    Complex64::new(-0.2844075372112717, 0.9587034748958716),
    Complex64::new(0.47679923006332225, 0.8790122264286334),
    Complex64::new(-0.8790122264286335, 0.4767992300633221),
    Complex64::new(0.7768884656732324, 0.629638238914927),
    Complex64::new(-0.6296382389149271, 0.7768884656732324),
    Complex64::new(0.10412163387205473, 0.9945645707342554),
    Complex64::new(-0.9945645707342554, 0.10412163387205457),
    Complex64::new(0.9819638691095552, 0.1890686641498062),
    Complex64::new(-0.18906866414980616, 0.9819638691095552),
    Complex64::new(0.560661576197336, 0.8280450452577558),
    Complex64::new(-0.8280450452577557, 0.5606615761973361),
    Complex64::new(0.83486287498638, 0.5504579729366048),
    Complex64::new(-0.5504579729366047, 0.8348628749863801),
    Complex64::new(0.20110463484209196, 0.9795697656854405),
    Complex64::new(-0.9795697656854405, 0.201104634842092),
    Complex64::new(0.9262102421383114, 0.37700741021641826),
    Complex64::new(-0.3770074102164182, 0.9262102421383114),
    Complex64::new(0.3883450466988263, 0.9215140393420419),
    Complex64::new(-0.9215140393420418, 0.3883450466988266),
    Complex64::new(0.7114321957452164, 0.7027547444572253),
    Complex64::new(-0.7027547444572251, 0.7114321957452167),
    Complex64::new(0.006135884649154515, 0.9999811752826011),
    Complex64::new(-0.9999811752826011, 0.006135884649154799),
];

const FELT_BITREVERSED_POWERS: [FalconFelt; 512] = [
    FalconFelt::from(1),
    FalconFelt::from(1479),
    FalconFelt::from(8246),
    FalconFelt::from(5146),
    FalconFelt::from(4134),
    FalconFelt::from(6553),
    FalconFelt::from(11567),
    FalconFelt::from(1305),
    FalconFelt::from(5860),
    FalconFelt::from(3195),
    FalconFelt::from(1212),
    FalconFelt::from(10643),
    FalconFelt::from(3621),
    FalconFelt::from(9744),
    FalconFelt::from(8785),
    FalconFelt::from(3542),
    FalconFelt::from(7311),
    FalconFelt::from(10938),
    FalconFelt::from(8961),
    FalconFelt::from(5777),
    FalconFelt::from(5023),
    FalconFelt::from(6461),
    FalconFelt::from(5728),
    FalconFelt::from(4591),
    FalconFelt::from(3006),
    FalconFelt::from(9545),
    FalconFelt::from(563),
    FalconFelt::from(9314),
    FalconFelt::from(2625),
    FalconFelt::from(11340),
    FalconFelt::from(4821),
    FalconFelt::from(2639),
    FalconFelt::from(12149),
    FalconFelt::from(1853),
    FalconFelt::from(726),
    FalconFelt::from(4611),
    FalconFelt::from(11112),
    FalconFelt::from(4255),
    FalconFelt::from(2768),
    FalconFelt::from(1635),
    FalconFelt::from(2963),
    FalconFelt::from(7393),
    FalconFelt::from(2366),
    FalconFelt::from(9238),
    FalconFelt::from(9198),
    FalconFelt::from(12208),
    FalconFelt::from(11289),
    FalconFelt::from(7969),
    FalconFelt::from(8736),
    FalconFelt::from(4805),
    FalconFelt::from(11227),
    FalconFelt::from(2294),
    FalconFelt::from(9542),
    FalconFelt::from(4846),
    FalconFelt::from(9154),
    FalconFelt::from(8577),
    FalconFelt::from(9275),
    FalconFelt::from(3201),
    FalconFelt::from(7203),
    FalconFelt::from(10963),
    FalconFelt::from(1170),
    FalconFelt::from(9970),
    FalconFelt::from(955),
    FalconFelt::from(11499),
    FalconFelt::from(8340),
    FalconFelt::from(8993),
    FalconFelt::from(2396),
    FalconFelt::from(4452),
    FalconFelt::from(6915),
    FalconFelt::from(2837),
    FalconFelt::from(130),
    FalconFelt::from(7935),
    FalconFelt::from(11336),
    FalconFelt::from(3748),
    FalconFelt::from(6522),
    FalconFelt::from(11462),
    FalconFelt::from(5067),
    FalconFelt::from(10092),
    FalconFelt::from(12171),
    FalconFelt::from(9813),
    FalconFelt::from(8011),
    FalconFelt::from(1673),
    FalconFelt::from(5331),
    FalconFelt::from(7300),
    FalconFelt::from(10908),
    FalconFelt::from(9764),
    FalconFelt::from(4177),
    FalconFelt::from(8705),
    FalconFelt::from(480),
    FalconFelt::from(9447),
    FalconFelt::from(1022),
    FalconFelt::from(12280),
    FalconFelt::from(5791),
    FalconFelt::from(11745),
    FalconFelt::from(9821),
    FalconFelt::from(11950),
    FalconFelt::from(12144),
    FalconFelt::from(6747),
    FalconFelt::from(8652),
    FalconFelt::from(3459),
    FalconFelt::from(2731),
    FalconFelt::from(8357),
    FalconFelt::from(6378),
    FalconFelt::from(7399),
    FalconFelt::from(10530),
    FalconFelt::from(3707),
    FalconFelt::from(8595),
    FalconFelt::from(5179),
    FalconFelt::from(3382),
    FalconFelt::from(355),
    FalconFelt::from(4231),
    FalconFelt::from(2548),
    FalconFelt::from(9048),
    FalconFelt::from(11560),
    FalconFelt::from(3289),
    FalconFelt::from(10276),
    FalconFelt::from(9005),
    FalconFelt::from(9408),
    FalconFelt::from(5092),
    FalconFelt::from(10200),
    FalconFelt::from(6534),
    FalconFelt::from(4632),
    FalconFelt::from(4388),
    FalconFelt::from(1260),
    FalconFelt::from(334),
    FalconFelt::from(2426),
    FalconFelt::from(1428),
    FalconFelt::from(10593),
    FalconFelt::from(3400),
    FalconFelt::from(2399),
    FalconFelt::from(5191),
    FalconFelt::from(9153),
    FalconFelt::from(9273),
    FalconFelt::from(243),
    FalconFelt::from(3000),
    FalconFelt::from(671),
    FalconFelt::from(3531),
    FalconFelt::from(11813),
    FalconFelt::from(3985),
    FalconFelt::from(7384),
    FalconFelt::from(10111),
    FalconFelt::from(10745),
    FalconFelt::from(6730),
    FalconFelt::from(11869),
    FalconFelt::from(9042),
    FalconFelt::from(2686),
    FalconFelt::from(2969),
    FalconFelt::from(3978),
    FalconFelt::from(8779),
    FalconFelt::from(6957),
    FalconFelt::from(9424),
    FalconFelt::from(2370),
    FalconFelt::from(8241),
    FalconFelt::from(10040),
    FalconFelt::from(9405),
    FalconFelt::from(11136),
    FalconFelt::from(3186),
    FalconFelt::from(5407),
    FalconFelt::from(10163),
    FalconFelt::from(1630),
    FalconFelt::from(3271),
    FalconFelt::from(8232),
    FalconFelt::from(10600),
    FalconFelt::from(8925),
    FalconFelt::from(4414),
    FalconFelt::from(2847),
    FalconFelt::from(10115),
    FalconFelt::from(4372),
    FalconFelt::from(9509),
    FalconFelt::from(5195),
    FalconFelt::from(7394),
    FalconFelt::from(10805),
    FalconFelt::from(9984),
    FalconFelt::from(7247),
    FalconFelt::from(4053),
    FalconFelt::from(9644),
    FalconFelt::from(12176),
    FalconFelt::from(4919),
    FalconFelt::from(2166),
    FalconFelt::from(8374),
    FalconFelt::from(12129),
    FalconFelt::from(9140),
    FalconFelt::from(7852),
    FalconFelt::from(3),
    FalconFelt::from(1426),
    FalconFelt::from(7635),
    FalconFelt::from(10512),
    FalconFelt::from(1663),
    FalconFelt::from(8653),
    FalconFelt::from(4938),
    FalconFelt::from(2704),
    FalconFelt::from(5291),
    FalconFelt::from(5277),
    FalconFelt::from(1168),
    FalconFelt::from(11082),
    FalconFelt::from(9041),
    FalconFelt::from(2143),
    FalconFelt::from(11224),
    FalconFelt::from(11885),
    FalconFelt::from(4645),
    FalconFelt::from(4096),
    FalconFelt::from(11796),
    FalconFelt::from(5444),
    FalconFelt::from(2381),
    FalconFelt::from(10911),
    FalconFelt::from(1912),
    FalconFelt::from(4337),
    FalconFelt::from(11854),
    FalconFelt::from(4976),
    FalconFelt::from(10682),
    FalconFelt::from(11414),
    FalconFelt::from(8509),
    FalconFelt::from(11287),
    FalconFelt::from(5011),
    FalconFelt::from(8005),
    FalconFelt::from(5088),
    FalconFelt::from(9852),
    FalconFelt::from(8643),
    FalconFelt::from(9302),
    FalconFelt::from(6267),
    FalconFelt::from(2422),
    FalconFelt::from(6039),
    FalconFelt::from(2187),
    FalconFelt::from(2566),
    FalconFelt::from(10849),
    FalconFelt::from(8526),
    FalconFelt::from(9223),
    FalconFelt::from(27),
    FalconFelt::from(7205),
    FalconFelt::from(1632),
    FalconFelt::from(7404),
    FalconFelt::from(1017),
    FalconFelt::from(4143),
    FalconFelt::from(7575),
    FalconFelt::from(12047),
    FalconFelt::from(10752),
    FalconFelt::from(8585),
    FalconFelt::from(2678),
    FalconFelt::from(7270),
    FalconFelt::from(11744),
    FalconFelt::from(3833),
    FalconFelt::from(3778),
    FalconFelt::from(11899),
    FalconFelt::from(773),
    FalconFelt::from(5101),
    FalconFelt::from(11222),
    FalconFelt::from(9888),
    FalconFelt::from(442),
    FalconFelt::from(9377),
    FalconFelt::from(6591),
    FalconFelt::from(354),
    FalconFelt::from(7428),
    FalconFelt::from(5012),
    FalconFelt::from(2481),
    FalconFelt::from(1045),
    FalconFelt::from(9430),
    FalconFelt::from(10302),
    FalconFelt::from(10587),
    FalconFelt::from(8724),
    FalconFelt::from(11635),
    FalconFelt::from(7083),
    FalconFelt::from(5529),
    FalconFelt::from(9090),
    FalconFelt::from(12233),
    FalconFelt::from(6152),
    FalconFelt::from(4948),
    FalconFelt::from(400),
    FalconFelt::from(1728),
    FalconFelt::from(6427),
    FalconFelt::from(6136),
    FalconFelt::from(6874),
    FalconFelt::from(3643),
    FalconFelt::from(10930),
    FalconFelt::from(5435),
    FalconFelt::from(1254),
    FalconFelt::from(11316),
    FalconFelt::from(10256),
    FalconFelt::from(3998),
    FalconFelt::from(10367),
    FalconFelt::from(8410),
    FalconFelt::from(11821),
    FalconFelt::from(8301),
    FalconFelt::from(11907),
    FalconFelt::from(316),
    FalconFelt::from(6950),
    FalconFelt::from(5446),
    FalconFelt::from(6093),
    FalconFelt::from(3710),
    FalconFelt::from(7822),
    FalconFelt::from(4789),
    FalconFelt::from(7540),
    FalconFelt::from(5537),
    FalconFelt::from(3789),
    FalconFelt::from(147),
    FalconFelt::from(5456),
    FalconFelt::from(7840),
    FalconFelt::from(11239),
    FalconFelt::from(7753),
    FalconFelt::from(5445),
    FalconFelt::from(3860),
    FalconFelt::from(9606),
    FalconFelt::from(1190),
    FalconFelt::from(8471),
    FalconFelt::from(6118),
    FalconFelt::from(5925),
    FalconFelt::from(1018),
    FalconFelt::from(8775),
    FalconFelt::from(1041),
    FalconFelt::from(1973),
    FalconFelt::from(5574),
    FalconFelt::from(11011),
    FalconFelt::from(2344),
    FalconFelt::from(4075),
    FalconFelt::from(5315),
    FalconFelt::from(4324),
    FalconFelt::from(4916),
    FalconFelt::from(10120),
    FalconFelt::from(11767),
    FalconFelt::from(7210),
    FalconFelt::from(9027),
    FalconFelt::from(6281),
    FalconFelt::from(11404),
    FalconFelt::from(7280),
    FalconFelt::from(1956),
    FalconFelt::from(11286),
    FalconFelt::from(3532),
    FalconFelt::from(12048),
    FalconFelt::from(12231),
    FalconFelt::from(1105),
    FalconFelt::from(12147),
    FalconFelt::from(5681),
    FalconFelt::from(8812),
    FalconFelt::from(8851),
    FalconFelt::from(2844),
    FalconFelt::from(975),
    FalconFelt::from(4212),
    FalconFelt::from(8687),
    FalconFelt::from(6068),
    FalconFelt::from(421),
    FalconFelt::from(8209),
    FalconFelt::from(3600),
    FalconFelt::from(3263),
    FalconFelt::from(7665),
    FalconFelt::from(6077),
    FalconFelt::from(4782),
    FalconFelt::from(6403),
    FalconFelt::from(9260),
    FalconFelt::from(5594),
    FalconFelt::from(8076),
    FalconFelt::from(11785),
    FalconFelt::from(605),
    FalconFelt::from(9987),
    FalconFelt::from(5468),
    FalconFelt::from(1010),
    FalconFelt::from(787),
    FalconFelt::from(8807),
    FalconFelt::from(5241),
    FalconFelt::from(9369),
    FalconFelt::from(9162),
    FalconFelt::from(8120),
    FalconFelt::from(5057),
    FalconFelt::from(7591),
    FalconFelt::from(3445),
    FalconFelt::from(7509),
    FalconFelt::from(2049),
    FalconFelt::from(7377),
    FalconFelt::from(10968),
    FalconFelt::from(192),
    FalconFelt::from(431),
    FalconFelt::from(10710),
    FalconFelt::from(2505),
    FalconFelt::from(5906),
    FalconFelt::from(12138),
    FalconFelt::from(10162),
    FalconFelt::from(8332),
    FalconFelt::from(9450),
    FalconFelt::from(6415),
    FalconFelt::from(677),
    FalconFelt::from(6234),
    FalconFelt::from(3336),
    FalconFelt::from(12237),
    FalconFelt::from(9115),
    FalconFelt::from(1323),
    FalconFelt::from(2766),
    FalconFelt::from(3150),
    FalconFelt::from(1319),
    FalconFelt::from(8243),
    FalconFelt::from(709),
    FalconFelt::from(8049),
    FalconFelt::from(8719),
    FalconFelt::from(11454),
    FalconFelt::from(6224),
    FalconFelt::from(922),
    FalconFelt::from(11848),
    FalconFelt::from(8210),
    FalconFelt::from(1058),
    FalconFelt::from(1958),
    FalconFelt::from(7967),
    FalconFelt::from(10211),
    FalconFelt::from(11177),
    FalconFelt::from(64),
    FalconFelt::from(8633),
    FalconFelt::from(11606),
    FalconFelt::from(9830),
    FalconFelt::from(6507),
    FalconFelt::from(1566),
    FalconFelt::from(2948),
    FalconFelt::from(9786),
    FalconFelt::from(6370),
    FalconFelt::from(7856),
    FalconFelt::from(3834),
    FalconFelt::from(5257),
    FalconFelt::from(10542),
    FalconFelt::from(9166),
    FalconFelt::from(9235),
    FalconFelt::from(5486),
    FalconFelt::from(1404),
    FalconFelt::from(11964),
    FalconFelt::from(1146),
    FalconFelt::from(11341),
    FalconFelt::from(3728),
    FalconFelt::from(8240),
    FalconFelt::from(6299),
    FalconFelt::from(1159),
    FalconFelt::from(6099),
    FalconFelt::from(295),
    FalconFelt::from(5766),
    FalconFelt::from(11637),
    FalconFelt::from(8527),
    FalconFelt::from(2919),
    FalconFelt::from(8273),
    FalconFelt::from(8212),
    FalconFelt::from(3329),
    FalconFelt::from(7991),
    FalconFelt::from(9597),
    FalconFelt::from(168),
    FalconFelt::from(10695),
    FalconFelt::from(1962),
    FalconFelt::from(5106),
    FalconFelt::from(6328),
    FalconFelt::from(5297),
    FalconFelt::from(6170),
    FalconFelt::from(3956),
    FalconFelt::from(1360),
    FalconFelt::from(11089),
    FalconFelt::from(7105),
    FalconFelt::from(9734),
    FalconFelt::from(6167),
    FalconFelt::from(9407),
    FalconFelt::from(1805),
    FalconFelt::from(1954),
    FalconFelt::from(2051),
    FalconFelt::from(6142),
    FalconFelt::from(2447),
    FalconFelt::from(3963),
    FalconFelt::from(11713),
    FalconFelt::from(8855),
    FalconFelt::from(8760),
    FalconFelt::from(9381),
    FalconFelt::from(218),
    FalconFelt::from(9928),
    FalconFelt::from(10446),
    FalconFelt::from(9259),
    FalconFelt::from(4115),
    FalconFelt::from(5333),
    FalconFelt::from(10258),
    FalconFelt::from(5876),
    FalconFelt::from(2281),
    FalconFelt::from(156),
    FalconFelt::from(9522),
    FalconFelt::from(8320),
    FalconFelt::from(3991),
    FalconFelt::from(453),
    FalconFelt::from(6381),
    FalconFelt::from(11871),
    FalconFelt::from(8517),
    FalconFelt::from(4774),
    FalconFelt::from(6860),
    FalconFelt::from(4737),
    FalconFelt::from(1293),
    FalconFelt::from(10232),
    FalconFelt::from(5369),
    FalconFelt::from(9087),
    FalconFelt::from(7796),
    FalconFelt::from(350),
    FalconFelt::from(1512),
    FalconFelt::from(10474),
    FalconFelt::from(6906),
    FalconFelt::from(1489),
    FalconFelt::from(2500),
    FalconFelt::from(1583),
    FalconFelt::from(6347),
    FalconFelt::from(11026),
    FalconFelt::from(12240),
    FalconFelt::from(6374),
    FalconFelt::from(1483),
    FalconFelt::from(3009),
    FalconFelt::from(1693),
    FalconFelt::from(723),
    FalconFelt::from(174),
    FalconFelt::from(2738),
    FalconFelt::from(6421),
    FalconFelt::from(2655),
    FalconFelt::from(6554),
    FalconFelt::from(10314),
    FalconFelt::from(3757),
    FalconFelt::from(9364),
    FalconFelt::from(11942),
    FalconFelt::from(7535),
    FalconFelt::from(10431),
    FalconFelt::from(426),
    FalconFelt::from(3315),
];

const FELT_BITREVERSED_POWERS_INVERSE: [FalconFelt; 512] = [
    FalconFelt::from(1),
    FalconFelt::from(10810),
    FalconFelt::from(7143),
    FalconFelt::from(4043),
    FalconFelt::from(10984),
    FalconFelt::from(722),
    FalconFelt::from(5736),
    FalconFelt::from(8155),
    FalconFelt::from(8747),
    FalconFelt::from(3504),
    FalconFelt::from(2545),
    FalconFelt::from(8668),
    FalconFelt::from(1646),
    FalconFelt::from(11077),
    FalconFelt::from(9094),
    FalconFelt::from(6429),
    FalconFelt::from(9650),
    FalconFelt::from(7468),
    FalconFelt::from(949),
    FalconFelt::from(9664),
    FalconFelt::from(2975),
    FalconFelt::from(11726),
    FalconFelt::from(2744),
    FalconFelt::from(9283),
    FalconFelt::from(7698),
    FalconFelt::from(6561),
    FalconFelt::from(5828),
    FalconFelt::from(7266),
    FalconFelt::from(6512),
    FalconFelt::from(3328),
    FalconFelt::from(1351),
    FalconFelt::from(4978),
    FalconFelt::from(790),
    FalconFelt::from(11334),
    FalconFelt::from(2319),
    FalconFelt::from(11119),
    FalconFelt::from(1326),
    FalconFelt::from(5086),
    FalconFelt::from(9088),
    FalconFelt::from(3014),
    FalconFelt::from(3712),
    FalconFelt::from(3135),
    FalconFelt::from(7443),
    FalconFelt::from(2747),
    FalconFelt::from(9995),
    FalconFelt::from(1062),
    FalconFelt::from(7484),
    FalconFelt::from(3553),
    FalconFelt::from(4320),
    FalconFelt::from(1000),
    FalconFelt::from(81),
    FalconFelt::from(3091),
    FalconFelt::from(3051),
    FalconFelt::from(9923),
    FalconFelt::from(4896),
    FalconFelt::from(9326),
    FalconFelt::from(10654),
    FalconFelt::from(9521),
    FalconFelt::from(8034),
    FalconFelt::from(1177),
    FalconFelt::from(7678),
    FalconFelt::from(11563),
    FalconFelt::from(10436),
    FalconFelt::from(140),
    FalconFelt::from(1696),
    FalconFelt::from(10861),
    FalconFelt::from(9863),
    FalconFelt::from(11955),
    FalconFelt::from(11029),
    FalconFelt::from(7901),
    FalconFelt::from(7657),
    FalconFelt::from(5755),
    FalconFelt::from(2089),
    FalconFelt::from(7197),
    FalconFelt::from(2881),
    FalconFelt::from(3284),
    FalconFelt::from(2013),
    FalconFelt::from(9000),
    FalconFelt::from(729),
    FalconFelt::from(3241),
    FalconFelt::from(9741),
    FalconFelt::from(8058),
    FalconFelt::from(11934),
    FalconFelt::from(8907),
    FalconFelt::from(7110),
    FalconFelt::from(3694),
    FalconFelt::from(8582),
    FalconFelt::from(1759),
    FalconFelt::from(4890),
    FalconFelt::from(5911),
    FalconFelt::from(3932),
    FalconFelt::from(9558),
    FalconFelt::from(8830),
    FalconFelt::from(3637),
    FalconFelt::from(5542),
    FalconFelt::from(145),
    FalconFelt::from(339),
    FalconFelt::from(2468),
    FalconFelt::from(544),
    FalconFelt::from(6498),
    FalconFelt::from(9),
    FalconFelt::from(11267),
    FalconFelt::from(2842),
    FalconFelt::from(11809),
    FalconFelt::from(3584),
    FalconFelt::from(8112),
    FalconFelt::from(2525),
    FalconFelt::from(1381),
    FalconFelt::from(4989),
    FalconFelt::from(6958),
    FalconFelt::from(10616),
    FalconFelt::from(4278),
    FalconFelt::from(2476),
    FalconFelt::from(118),
    FalconFelt::from(2197),
    FalconFelt::from(7222),
    FalconFelt::from(827),
    FalconFelt::from(5767),
    FalconFelt::from(8541),
    FalconFelt::from(953),
    FalconFelt::from(4354),
    FalconFelt::from(12159),
    FalconFelt::from(9452),
    FalconFelt::from(5374),
    FalconFelt::from(7837),
    FalconFelt::from(9893),
    FalconFelt::from(3296),
    FalconFelt::from(3949),
    FalconFelt::from(2859),
    FalconFelt::from(11244),
    FalconFelt::from(9808),
    FalconFelt::from(7277),
    FalconFelt::from(4861),
    FalconFelt::from(11935),
    FalconFelt::from(5698),
    FalconFelt::from(2912),
    FalconFelt::from(11847),
    FalconFelt::from(2401),
    FalconFelt::from(1067),
    FalconFelt::from(7188),
    FalconFelt::from(11516),
    FalconFelt::from(390),
    FalconFelt::from(8511),
    FalconFelt::from(8456),
    FalconFelt::from(545),
    FalconFelt::from(5019),
    FalconFelt::from(9611),
    FalconFelt::from(3704),
    FalconFelt::from(1537),
    FalconFelt::from(242),
    FalconFelt::from(4714),
    FalconFelt::from(8146),
    FalconFelt::from(11272),
    FalconFelt::from(4885),
    FalconFelt::from(10657),
    FalconFelt::from(5084),
    FalconFelt::from(12262),
    FalconFelt::from(3066),
    FalconFelt::from(3763),
    FalconFelt::from(1440),
    FalconFelt::from(9723),
    FalconFelt::from(10102),
    FalconFelt::from(6250),
    FalconFelt::from(9867),
    FalconFelt::from(6022),
    FalconFelt::from(2987),
    FalconFelt::from(3646),
    FalconFelt::from(2437),
    FalconFelt::from(7201),
    FalconFelt::from(4284),
    FalconFelt::from(7278),
    FalconFelt::from(1002),
    FalconFelt::from(3780),
    FalconFelt::from(875),
    FalconFelt::from(1607),
    FalconFelt::from(7313),
    FalconFelt::from(435),
    FalconFelt::from(7952),
    FalconFelt::from(10377),
    FalconFelt::from(1378),
    FalconFelt::from(9908),
    FalconFelt::from(6845),
    FalconFelt::from(493),
    FalconFelt::from(8193),
    FalconFelt::from(7644),
    FalconFelt::from(404),
    FalconFelt::from(1065),
    FalconFelt::from(10146),
    FalconFelt::from(3248),
    FalconFelt::from(1207),
    FalconFelt::from(11121),
    FalconFelt::from(7012),
    FalconFelt::from(6998),
    FalconFelt::from(9585),
    FalconFelt::from(7351),
    FalconFelt::from(3636),
    FalconFelt::from(10626),
    FalconFelt::from(1777),
    FalconFelt::from(4654),
    FalconFelt::from(10863),
    FalconFelt::from(12286),
    FalconFelt::from(4437),
    FalconFelt::from(3149),
    FalconFelt::from(160),
    FalconFelt::from(3915),
    FalconFelt::from(10123),
    FalconFelt::from(7370),
    FalconFelt::from(113),
    FalconFelt::from(2645),
    FalconFelt::from(8236),
    FalconFelt::from(5042),
    FalconFelt::from(2305),
    FalconFelt::from(1484),
    FalconFelt::from(4895),
    FalconFelt::from(7094),
    FalconFelt::from(2780),
    FalconFelt::from(7917),
    FalconFelt::from(2174),
    FalconFelt::from(9442),
    FalconFelt::from(7875),
    FalconFelt::from(3364),
    FalconFelt::from(1689),
    FalconFelt::from(4057),
    FalconFelt::from(9018),
    FalconFelt::from(10659),
    FalconFelt::from(2126),
    FalconFelt::from(6882),
    FalconFelt::from(9103),
    FalconFelt::from(1153),
    FalconFelt::from(2884),
    FalconFelt::from(2249),
    FalconFelt::from(4048),
    FalconFelt::from(9919),
    FalconFelt::from(2865),
    FalconFelt::from(5332),
    FalconFelt::from(3510),
    FalconFelt::from(8311),
    FalconFelt::from(9320),
    FalconFelt::from(9603),
    FalconFelt::from(3247),
    FalconFelt::from(420),
    FalconFelt::from(5559),
    FalconFelt::from(1544),
    FalconFelt::from(2178),
    FalconFelt::from(4905),
    FalconFelt::from(8304),
    FalconFelt::from(476),
    FalconFelt::from(8758),
    FalconFelt::from(11618),
    FalconFelt::from(9289),
    FalconFelt::from(12046),
    FalconFelt::from(3016),
    FalconFelt::from(3136),
    FalconFelt::from(7098),
    FalconFelt::from(9890),
    FalconFelt::from(8889),
    FalconFelt::from(8974),
    FalconFelt::from(11863),
    FalconFelt::from(1858),
    FalconFelt::from(4754),
    FalconFelt::from(347),
    FalconFelt::from(2925),
    FalconFelt::from(8532),
    FalconFelt::from(1975),
    FalconFelt::from(5735),
    FalconFelt::from(9634),
    FalconFelt::from(5868),
    FalconFelt::from(9551),
    FalconFelt::from(12115),
    FalconFelt::from(11566),
    FalconFelt::from(10596),
    FalconFelt::from(9280),
    FalconFelt::from(10806),
    FalconFelt::from(5915),
    FalconFelt::from(49),
    FalconFelt::from(1263),
    FalconFelt::from(5942),
    FalconFelt::from(10706),
    FalconFelt::from(9789),
    FalconFelt::from(10800),
    FalconFelt::from(5383),
    FalconFelt::from(1815),
    FalconFelt::from(10777),
    FalconFelt::from(11939),
    FalconFelt::from(4493),
    FalconFelt::from(3202),
    FalconFelt::from(6920),
    FalconFelt::from(2057),
    FalconFelt::from(10996),
    FalconFelt::from(7552),
    FalconFelt::from(5429),
    FalconFelt::from(7515),
    FalconFelt::from(3772),
    FalconFelt::from(418),
    FalconFelt::from(5908),
    FalconFelt::from(11836),
    FalconFelt::from(8298),
    FalconFelt::from(3969),
    FalconFelt::from(2767),
    FalconFelt::from(12133),
    FalconFelt::from(10008),
    FalconFelt::from(6413),
    FalconFelt::from(2031),
    FalconFelt::from(6956),
    FalconFelt::from(8174),
    FalconFelt::from(3030),
    FalconFelt::from(1843),
    FalconFelt::from(2361),
    FalconFelt::from(12071),
    FalconFelt::from(2908),
    FalconFelt::from(3529),
    FalconFelt::from(3434),
    FalconFelt::from(576),
    FalconFelt::from(8326),
    FalconFelt::from(9842),
    FalconFelt::from(6147),
    FalconFelt::from(10238),
    FalconFelt::from(10335),
    FalconFelt::from(10484),
    FalconFelt::from(2882),
    FalconFelt::from(6122),
    FalconFelt::from(2555),
    FalconFelt::from(5184),
    FalconFelt::from(1200),
    FalconFelt::from(10929),
    FalconFelt::from(8333),
    FalconFelt::from(6119),
    FalconFelt::from(6992),
    FalconFelt::from(5961),
    FalconFelt::from(7183),
    FalconFelt::from(10327),
    FalconFelt::from(1594),
    FalconFelt::from(12121),
    FalconFelt::from(2692),
    FalconFelt::from(4298),
    FalconFelt::from(8960),
    FalconFelt::from(4077),
    FalconFelt::from(4016),
    FalconFelt::from(9370),
    FalconFelt::from(3762),
    FalconFelt::from(652),
    FalconFelt::from(6523),
    FalconFelt::from(11994),
    FalconFelt::from(6190),
    FalconFelt::from(11130),
    FalconFelt::from(5990),
    FalconFelt::from(4049),
    FalconFelt::from(8561),
    FalconFelt::from(948),
    FalconFelt::from(11143),
    FalconFelt::from(325),
    FalconFelt::from(10885),
    FalconFelt::from(6803),
    FalconFelt::from(3054),
    FalconFelt::from(3123),
    FalconFelt::from(1747),
    FalconFelt::from(7032),
    FalconFelt::from(8455),
    FalconFelt::from(4433),
    FalconFelt::from(5919),
    FalconFelt::from(2503),
    FalconFelt::from(9341),
    FalconFelt::from(10723),
    FalconFelt::from(5782),
    FalconFelt::from(2459),
    FalconFelt::from(683),
    FalconFelt::from(3656),
    FalconFelt::from(12225),
    FalconFelt::from(1112),
    FalconFelt::from(2078),
    FalconFelt::from(4322),
    FalconFelt::from(10331),
    FalconFelt::from(11231),
    FalconFelt::from(4079),
    FalconFelt::from(441),
    FalconFelt::from(11367),
    FalconFelt::from(6065),
    FalconFelt::from(835),
    FalconFelt::from(3570),
    FalconFelt::from(4240),
    FalconFelt::from(11580),
    FalconFelt::from(4046),
    FalconFelt::from(10970),
    FalconFelt::from(9139),
    FalconFelt::from(9523),
    FalconFelt::from(10966),
    FalconFelt::from(3174),
    FalconFelt::from(52),
    FalconFelt::from(8953),
    FalconFelt::from(6055),
    FalconFelt::from(11612),
    FalconFelt::from(5874),
    FalconFelt::from(2839),
    FalconFelt::from(3957),
    FalconFelt::from(2127),
    FalconFelt::from(151),
    FalconFelt::from(6383),
    FalconFelt::from(9784),
    FalconFelt::from(1579),
    FalconFelt::from(11858),
    FalconFelt::from(12097),
    FalconFelt::from(1321),
    FalconFelt::from(4912),
    FalconFelt::from(10240),
    FalconFelt::from(4780),
    FalconFelt::from(8844),
    FalconFelt::from(4698),
    FalconFelt::from(7232),
    FalconFelt::from(4169),
    FalconFelt::from(3127),
    FalconFelt::from(2920),
    FalconFelt::from(7048),
    FalconFelt::from(3482),
    FalconFelt::from(11502),
    FalconFelt::from(11279),
    FalconFelt::from(6821),
    FalconFelt::from(2302),
    FalconFelt::from(11684),
    FalconFelt::from(504),
    FalconFelt::from(4213),
    FalconFelt::from(6695),
    FalconFelt::from(3029),
    FalconFelt::from(5886),
    FalconFelt::from(7507),
    FalconFelt::from(6212),
    FalconFelt::from(4624),
    FalconFelt::from(9026),
    FalconFelt::from(8689),
    FalconFelt::from(4080),
    FalconFelt::from(11868),
    FalconFelt::from(6221),
    FalconFelt::from(3602),
    FalconFelt::from(8077),
    FalconFelt::from(11314),
    FalconFelt::from(9445),
    FalconFelt::from(3438),
    FalconFelt::from(3477),
    FalconFelt::from(6608),
    FalconFelt::from(142),
    FalconFelt::from(11184),
    FalconFelt::from(58),
    FalconFelt::from(241),
    FalconFelt::from(8757),
    FalconFelt::from(1003),
    FalconFelt::from(10333),
    FalconFelt::from(5009),
    FalconFelt::from(885),
    FalconFelt::from(6008),
    FalconFelt::from(3262),
    FalconFelt::from(5079),
    FalconFelt::from(522),
    FalconFelt::from(2169),
    FalconFelt::from(7373),
    FalconFelt::from(7965),
    FalconFelt::from(6974),
    FalconFelt::from(8214),
    FalconFelt::from(9945),
    FalconFelt::from(1278),
    FalconFelt::from(6715),
    FalconFelt::from(10316),
    FalconFelt::from(11248),
    FalconFelt::from(3514),
    FalconFelt::from(11271),
    FalconFelt::from(6364),
    FalconFelt::from(6171),
    FalconFelt::from(3818),
    FalconFelt::from(11099),
    FalconFelt::from(2683),
    FalconFelt::from(8429),
    FalconFelt::from(6844),
    FalconFelt::from(4536),
    FalconFelt::from(1050),
    FalconFelt::from(4449),
    FalconFelt::from(6833),
    FalconFelt::from(12142),
    FalconFelt::from(8500),
    FalconFelt::from(6752),
    FalconFelt::from(4749),
    FalconFelt::from(7500),
    FalconFelt::from(4467),
    FalconFelt::from(8579),
    FalconFelt::from(6196),
    FalconFelt::from(6843),
    FalconFelt::from(5339),
    FalconFelt::from(11973),
    FalconFelt::from(382),
    FalconFelt::from(3988),
    FalconFelt::from(468),
    FalconFelt::from(3879),
    FalconFelt::from(1922),
    FalconFelt::from(8291),
    FalconFelt::from(2033),
    FalconFelt::from(973),
    FalconFelt::from(11035),
    FalconFelt::from(6854),
    FalconFelt::from(1359),
    FalconFelt::from(8646),
    FalconFelt::from(5415),
    FalconFelt::from(6153),
    FalconFelt::from(5862),
    FalconFelt::from(10561),
    FalconFelt::from(11889),
    FalconFelt::from(7341),
    FalconFelt::from(6137),
    FalconFelt::from(56),
    FalconFelt::from(3199),
    FalconFelt::from(6760),
    FalconFelt::from(5206),
    FalconFelt::from(654),
    FalconFelt::from(3565),
    FalconFelt::from(1702),
    FalconFelt::from(1987),
];

const FELT_NINV_1: FalconFelt = FalconFelt::from(1);
const FELT_NINV_2: FalconFelt = FalconFelt::from(6145);
const FELT_NINV_4: FalconFelt = FalconFelt::from(9217);
const FELT_NINV_8: FalconFelt = FalconFelt::from(10753);
const FELT_NINV_16: FalconFelt = FalconFelt::from(11521);
const FELT_NINV_32: FalconFelt = FalconFelt::from(11905);
const FELT_NINV_64: FalconFelt = FalconFelt::from(12097);
const FELT_NINV_128: FalconFelt = FalconFelt::from(12193);
const FELT_NINV_256: FalconFelt = FalconFelt::from(12241);
const FELT_NINV_512: FalconFelt = FalconFelt::from(12265);
